---
const { setId = "", setCopy = "", setMessageRes = "", className } = Astro.props;
---

<custom-element
  data-setid={setId}
  data-setcopy={setCopy}
  data-setmessageresponse={setMessageRes}
>
  <button class={`relative ${className ?? ""}`}>
    <slot />
  </button>
</custom-element>

<script>
  class ButtonMessage extends HTMLElement {
    constructor() {
      super();

      // Read the message from the data attribute.
      const button = this.querySelector("button");
      const copyMessage = this.dataset.setcopy;
      const messageResponse = this.dataset.setmessageresponse;
      const messageElementId = this.dataset.setid;

      const addMessageElement = () => {
        const messageEl = document.createElement("span");
        messageEl.textContent = messageResponse;
        messageEl.id = messageElementId;
        messageEl.classList =
          " w-fit h-fit px-[8px] bg-white text-black absolute top-0  duration-[500ms] text-xs ease-linear transition-all opacity- rounded-full  ";

        button.appendChild(messageEl);

        return { messageEl };
      };

      const copyToClipboard = () => {
        navigator.clipboard.writeText(copyMessage).catch(function (err) {
          console.error("Error al intentar copiar al portapapeles: ", err);
        });
      };

      button.addEventListener("click", () => {
        copyToClipboard();
        const { messageEl } = addMessageElement();

        setTimeout(() => {
          messageEl.style.transform = "translateY(-20px)";
          messageEl.style.opacity = "0";
        }, 100);

        setTimeout(() => {
          const parentElements = Array.from(button.children);
          const validateElement = parentElements.some(
            (el) => el.id === messageElementId
          );

          if (validateElement) button.removeChild(messageEl);
        }, 1000);
      });
    }
  }

  customElements.define("custom-element", ButtonMessage);
</script>
